[base]
name = sonata-cell-position
path = src/app
pip_compile = python -m piptools compile --allow-unsafe -o requirements.txt pyproject.toml
pip_compile_check = diff <(cat requirements.txt|grep -vE "^ *\#") <({[base]pip_compile} --dry-run 2>&1|grep -v Dry-run|grep -vE "^ *\#")

[tox]
minversion = 4
isolated_build = true
ignore_basepython_conflict = true

[testenv]
basepython=python3.10
setenv =
    PIP_INDEX_URL = https://bbpteam.epfl.ch/repository/devpi/simple
    LOGGING_LEVEL = DEBUG
    DEBUG = true
extras =
    cli
deps =
    -r requirements.txt
    httpx
    pytest
    pytest-cov[all]
    coverage[toml]
commands =
    python -m pytest -vv --cov=app tests/ {posargs}
    coverage xml
    coverage html

[testenv:check-packaging]
skip_install = true
deps =
    wheel
    twine
    build
commands_pre =
    rm -Rf {envtmpdir}/dist
commands =
    python -m build --outdir {envtmpdir}/dist
    twine check {envtmpdir}/dist/*
allowlist_externals = rm

[testenv:lint]
deps =
    -r requirements.txt
    ruff
    pycodestyle
    pydocstyle[toml]
    pylint
    isort
    black
    mypy
    types-PyYAML
    pip-tools
commands =
    ruff check {[base]path}
    pycodestyle {[base]path}
    pydocstyle {[base]path}
    pylint {[base]path}
    isort --check-only --diff {[base]path}
    black --check .
    mypy --show-error-codes --ignore-missing-imports --allow-redefinition {[base]path}
    bash -c '{[base]pip_compile_check}'
allowlist_externals = bash

[testenv:format]
skip_install = true
deps =
    pyupgrade
    autoflake
    isort
    black
commands =
    find {[base]path} -type f -name '*.py' -exec pyupgrade --py310-plus {} ;
    autoflake -ir --remove-all-unused-imports --ignore-init-module-imports {[base]path}
    isort {[base]path}
    black .
allowlist_externals = find

[testenv:compile-requirements]
skip_install = true
deps = pip-tools
commands = {[base]pip_compile}

[testenv:upgrade-requirements]
skip_install = true
deps = pip-tools
commands = {[base]pip_compile} --upgrade

[testenv:check-requirements]
skip_install = true
deps = pip-tools
commands = bash -c '{[base]pip_compile_check}'
allowlist_externals = bash

[testenv:build-image]
skip_install = true
deps =
commands =
    bash -c '\
    docker build -t {[base]name} . \
    --build-arg PROJECT_PATH={[base]name}:local \
    --build-arg COMMIT_SHA=$(git rev-parse HEAD)'
allowlist_externals = bash

[testenv:run-image]
skip_install = true
deps =
commands =
    docker run --rm --name {[base]name} -p8000:8000 \
    -e DEBUG=true -e LOGGING_LEVEL=DEBUG \
    -v {env:HOME}/tmp/data:/data:ro \
    --cap-add SYS_PTRACE \
    {[base]name}
allowlist_externals = docker

[pycodestyle]
# E203: whitespace before ':'
# E731: do not assign a lambda expression, use a def
# W503: line break after binary operator
# W504: line break before binary operator
# E501: line too long (checked with pylint)
ignore = E203,E731,W503,W504,E501

[pydocstyle]
# D413: no blank line after last section
# D100: Missing docstring in public module
# D103: Missing docstring in public function
# D104: Missing docstring in public package
# D202: no blank line after docstring (handled by black, causes an issue if first line is '#pylint:disable')
add-ignore = D413,D100,D103,D104,D202
convention = google
